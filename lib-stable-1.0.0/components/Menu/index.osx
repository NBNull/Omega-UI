//React 核心
import React, {Component, Fragment} from 'react';
import {NavLink} from 'react-router-dom'
import PropTypes from 'prop-types';
//Script 工具
import {_default, _type, _props} from '../../scripts/utils/_props';
import {isExist, isArray} from '../../scripts/utils/_is';
import {mUtil} from '../../scripts/utils/_util';
import {mApp} from '../../scripts/utils/_app';
import mMenu from '../../scripts/menu/menu';
//依赖组件
import Icon from '../Icon/index.osx';
import Text from '../Text/index.osx';
import Badge from '../Badge/index.osx';
import Title from '../Title/index.osx';
import Link from '../Link/index.osx';
import Div from '../Div/index.osx';
import List from '../List/index.osx';
//组件样式
import '../../stylesheets/menu/_index.scss';

const StaticProps = {
    children: {}
};

export default class Menu extends Component {
    constructor(props) {
        super(props);
    }

    static defaultProps = _default(StaticProps);
    static propTypes = _type(StaticProps);

    componentDidMount() {
        const _props = this.props;
        let {autoScroll, expandAll, slideSpeed, speed, autoScrollSpeed, timeout, isChild} = _props;
        if (!isChild) {
            let _dom = this.refs.Menu.refs.Div;
            let menu = $(_dom);
            let menuDesktopMode = (menu.data('m-menu-dropdown') === '1' ? 'dropdown' : 'accordion');
            let asideMenu = new mMenu(_dom, {
                // submenu setup
                submenu: {
                    desktop: {
                        // by default the menu mode set to accordion in desktop mode
                        default: menuDesktopMode,
                        // whenever body has this class switch the menu mode to dropdown
                        state: {
                            body: 'm-aside-left--minimize',
                            mode: 'dropdown'
                        }
                    },
                    tablet: 'accordion', // menu set to accordion in tablet mode
                    mobile: 'accordion'  // menu set to accordion in mobile mode
                },

                //accordion setup
                accordion: {
                    slideSpeed: slideSpeed || 200,
                    speed: speed || 1200,
                    autoScrollSpeed: autoScrollSpeed || 1200,
                    autoScroll,
                    expandAll,
                    timeout: timeout || 500
                }
            });


            //== Handle fixed aside menu
            if (menu.attr('m-menu-scrollable') === '1') {
                function initScrollableMenu(obj) {
                    if (mUtil.isInResponsiveRange('tablet-and-mobile')) {
                        //== Destroy if the instance was previously created
                        mApp.destroyScroller(obj);
                        return;
                    }

                    let height = mUtil.getViewPort().height - parseInt(mUtil.css('m_header', 'height'));

                    //== Create/re-create a new instance
                    mApp.initScroller(obj, {height: height});
                }

                initScrollableMenu(menu);

                mUtil.addResizeHandler(function () {
                    initScrollableMenu(menu);
                });
            }
        }
    }

    render() {
        const props = this.props;
        const {skin, items, isChild} = props;
        let _sysClass = [(isExist(isChild) && isChild ? 'm-menu__submenu' : 'm-aside-menu' )];
        isExist(skin) && ['dark', 'light'].includes(skin) && _sysClass.push('m-aside-menu--skin-' + skin) && _sysClass.push('m-aside-menu--submenu-skin-' + skin);
        let _items = [];
        isExist(items) && isArray(items) && items.map((item) => {
            let {type, text, icon, badge, bullet, child, isExpand, isActive, href} = item;
            let _render = (
                <Fragment>
                    {
                        isExist(bullet) && bullet.show && (
                            <Icon
                                _includeClass={["m-menu__link-bullet", "m-menu__link-bullet--" + (['dot', 'line'].includes(bullet.type) ? bullet.type : 'dot')]}>
                                <Text />
                            </Icon>
                        )
                    }
                    {isExist(icon) && icon.show && (
                        <Icon iconName={icon.name} _includeClass="m-menu__link-icon"/>)}
                    {
                        isExist(badge) && badge.show ? (
                            <Text _includeClass="m-menu__link-title">
                                <Text _includeClass="m-menu__link-wrap">
                                    <Text _includeClass="m-menu__link-text">
                                        {text}
                                    </Text>
                                    <Text _includeClass="m-menu__link-badge">
                                        <Badge {..._props(badge)}>{badge.value}</Badge>
                                    </Text>
                                </Text>
                            </Text>
                        ) : (
                            <Text _includeClass="m-menu__link-text">{text}</Text>
                        )
                    }
                    {
                        isExist(child) && isArray(child) && (
                            <Icon _includeClass="m-menu__ver-arrow" iconName="la la-angle-right"/>)
                    }
                </Fragment>
            );
            switch (type) {
                case 'section':
                    _items.push({
                        _includeClass: 'm-menu__section ',
                        value: (
                            <Fragment>
                                <Title {...{
                                    _includeClass: 'm-menu__section-text',
                                    level: 4
                                }}>
                                    {text}
                                </Title>
                                {isExist(icon) && icon.show && (
                                    <Icon _includeClass="m-menu__section-icon" iconName={icon.name}/>)}
                            </Fragment>
                        )
                    });
                    break;
                case 'separator':
                    _items.push({
                        _includeClass: 'm-menu__separator'
                    });
                    break;
                case 'route':
                    _items.push({
                        _includeClass: ['m-menu__item', (isExpand ? 'm-menu__item--open' : ''), (isExist(child) ? 'm-menu__item--submenu' : ''), (isActive ? 'm-menu__item--active' : '')],
                        _includeAttribute: {
                            'aria-haspopup': true,
                            'm-menu-submenu-toggle': 'hover'
                        },
                        value: (
                            <Fragment>
                                <NavLink exact activeClassName="m-menu__item--active"
                                         className={["m-menu__link", (isExist(child) ? 'm-menu__toggle' : '')].join(' ')}
                                         to={href || ''}>
                                    {_render}
                                </NavLink>
                                {isExist(child) && <Menu {...{
                                    items: child,
                                    isChild: true
                                }}/>}
                            </Fragment>
                        )
                    });
                    break;
                default:
                    _items.push({
                        _includeClass: ['m-menu__item', (isExpand ? 'm-menu__item--open' : ''), (isExist(child) ? 'm-menu__item--submenu' : ''), (isActive ? 'm-menu__item--active' : '')],
                        _includeAttribute: {
                            'aria-haspopup': true,
                            'm-menu-submenu-toggle': 'hover'
                        },
                        value: (
                            <Fragment>
                                <Link {..._props(item, {
                                    _sysClass: ["m-menu__link", (isExist(child) ? 'm-menu__toggle' : '')]
                                })}
                                      _excludeClass="m-link">
                                    {_render}
                                </Link>
                                {isExist(child) && <Menu {...{
                                    items: child,
                                    isChild: true
                                }}/>}
                            </Fragment>
                        )
                    });
            }
        });
        return (
            <Fragment>
                <Div ref="Menu" {..._props(props, {
                    _sysClass,
                    _sysAttribute: {
                        'm-menu-vertical': 1,
                        'm-menu-scrollable': 0,
                        'm-menu-dropdown-timeout': 500
                    }
                })}>
                    <List {...{
                        items: _items,
                        _includeClass: (isExist(isChild) && isChild ? ['m-menu__subnav'] : ['m-menu__nav', 'm-menu__nav--dropdown-submenu-arrow'])
                    }}/>
                </Div>
            </Fragment>
        )
    }
}