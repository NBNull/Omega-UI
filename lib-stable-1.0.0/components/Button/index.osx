//React 核心
import React, {Component, Fragment} from 'react';
import PropTypes from 'prop-types';
//Script 工具
import {_default, _type, _props} from '../../scripts/utils/_props';
import {isArray, isExist, isString, isNotExist} from '../../scripts/utils/_is';
import {_publicColor,_totalColor} from '../../scripts/utils/_color';
//依赖组件
import Icon from '../Icon/index.osx';
import Text from '../Text/index.osx';
//组件样式
import '../../stylesheets/button/_index.scss';

const StaticProps = {
    label: {
        defaultValue: 'button',
        type: PropTypes.oneOf(['a', 'button', 'input'])
    },
    href: {
        defaultValue: '#',
        type: PropTypes.string
    },
    type: {
        defaultValue: 'button',
        type: PropTypes.oneOf(['reset', 'button', 'submit'])
    },
    thicken: {
        defaultValue: false,
        type: PropTypes.bool
    },
    fontBold: {
        defaultValue: 'normal',
        type: PropTypes.oneOf(['thin', 'normal', 'bold', 'bolder', 'boldest', 'boldest2'])
    },
    value: {},
    size: {
        defaultValue: 'normal',
        type: PropTypes.oneOf(['sm', 'lg', 'normal'])
    },
    gradient: {
        type: PropTypes.shape({
            from: PropTypes.oneOf(_publicColor),
            to: PropTypes.oneOf(_publicColor)
        })
    },
    btnColor: {
        type: PropTypes.oneOf(_totalColor)
    },
    isWide: {
        defaultValue: false,
        type: PropTypes.bool
    },
    isBlock: {
        defaultValue: false,
        type: PropTypes.bool
    },
    btnState: {
        defaultValue: 'normal',
        type: PropTypes.oneOf(['active', 'disabled', 'normal'])
    },
    btnStyle: {
        type: PropTypes.oneOfType([
            PropTypes.string,
            PropTypes.array
        ])
    },
    isCustom: {
        defaultValue: false,
        type: PropTypes.bool
    },
    loader: {
        type: PropTypes.object
    },
    icon: {
        type: PropTypes.object
    },
    _specialIcon: PropTypes.bool,
    children: {}
};

export default class Button extends Component {
    constructor(props) {
        super(props);
    }

    static defaultProps = _default(StaticProps);
    static propTypes = _type(StaticProps);

    render() {
        const props = this.props;
        const {label, href, type, thicken, fontBold, value, size, gradient, btnColor, isWide, isBlock, btnState, btnStyle, isCustom, loader, icon, _specialIcon} = props;
        let _sysClass = ['btn', 'm-btn'];
        //背景颜色
        btnColor && _sysClass.push('btn-' + btnColor);
        //渐变色 Class
        if (gradient && gradient.from && gradient.to) {
            _sysClass = _sysClass.concat(['m-btn--gradient-from-' + gradient.from, 'm-btn--gradient-to-' + gradient.to]);
        }
        //Btn是否加宽
        isWide && _sysClass.push('m-btn--wide');
        //Btn是否显示为块元素
        isBlock && _sysClass.push('btn-block');
        //Btn尺寸：lg和sm
        ['lg', 'sm'].includes(size) && _sysClass.push('btn-' + size);
        //Btn状态：active,disabled
        ['active', 'disabled'].includes(btnState) && _sysClass.push(btnState);
        //Btn类型
        isArray(btnStyle) && btnStyle.map((item) => {
            ['square', 'pill', 'air'].includes(item) && _sysClass.push('m-btn--' + item);
        });
        isExist(btnStyle) && isString(btnStyle) && _sysClass.push('m-btn--' + btnStyle);
        //是否使用Omega定制组件
        isCustom && _sysClass.push('m-btn--custom');
        //边框变厚（仅Outline'）
        thicken && _sysClass.push('m-btn--outline-2x');
        ['thin', 'normal', 'bold', 'bolder', 'boldest', 'boldest2'].includes(fontBold) && _sysClass.push('m-btn--' + fontBold);
        if (isExist(loader) && loader.show) {
            _sysClass.push('m-loader');
            isExist(loader.color) && _sysClass.push('m-loader--' + loader.color);
            isExist(loader.size) && ['sm', 'lg'].includes(loader.size) && _sysClass.push('m-loader--' + loader.size);
            isExist(loader.align) && ['center', 'left', 'right'].includes(loader.align) && _sysClass.push('m-loader--' + loader.align);
        }
        if (isExist(icon) && icon.show) {
            //显示Icon
            _sysClass.push('m-btn--icon');
            if (isNotExist(value)) {
                _sysClass.push('m-btn--icon-only');
            }

        }
        let componentDom = null;
        switch (label) {
            case 'button':
                componentDom = (<Fragment>
                    <button ref="Button" {..._props(props, {_sysClass, _sysAttribute: {type}}, null, true)}>
                        {
                            !_specialIcon && (
                                isExist(icon) && icon.show ? (isNotExist(value) ? (
                                    <Icon iconName={icon.name} {..._props(icon)}/>
                                ) : (<Text>
                                    <Icon iconName={icon.name} {..._props(icon)}/>
                                    <Text>{value}</Text>
                                </Text>)) : value
                            )
                        }
                        {
                            _specialIcon && (
                                <Fragment>
                                    <Icon iconName={icon.name}/>
                                    {value}
                                </Fragment>
                            )
                        }
                    </button>
                </Fragment>);
                break;
            case 'input':
                componentDom = (<Fragment><input ref="Button" {..._props(props, {
                    _sysClass,
                    _sysAttribute: {value, type}
                }, null, true)} /></Fragment>);
                break;
            case 'a':
                componentDom = (<Fragment><a ref="Button" {..._props(props, {
                        _sysClass,
                        _sysAttribute: {href, role: type}
                    }, null, true)}>
                        {
                            !_specialIcon && (
                                isExist(icon) && icon.show ? (isNotExist(value) ? (
                                    <Icon iconName={icon.name} {..._props(icon)}/>
                                ) : (<Text>
                                    <Icon iconName={icon.name} {..._props(icon)}/>
                                    <Text>{value}</Text>
                                </Text>)) : value
                            )
                        }
                        {
                            _specialIcon && (
                                <Fragment>
                                    <Icon iconName={icon.name} {..._props(icon)}/>
                                    {value}
                                </Fragment>
                            )
                        }
                    </a></Fragment>
                )
        }
        return (componentDom);
    }
}