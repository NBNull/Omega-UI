//React 核心
import React, {Component, Fragment} from 'react';
import PropTypes from 'prop-types';
//Script 工具
import {_default, _type, _props} from '../../scripts/utils/_props';
import {isObject, isExist, isArray} from '../../scripts/utils/_is';
//依赖组件
import Nav from '../Nav/index.osx';
//组件样式


const StaticProps = {
    items: {
        type: PropTypes.array
    },
    separator: {
        type: PropTypes.oneOfType([
            PropTypes.string,
            PropTypes.object
        ])
    },
    children: {}
};

export default class Breadcrumb extends Component {
    constructor(props) {
        super(props);
    }

    static defaultProps = _default(StaticProps);
    static propTypes = _type(StaticProps);

    render() {
        const props = this.props;
        const {items, separator} = props;
        let _items = [];
        isExist(items) && isArray(items) && items.map((item, index) => {
            isObject(item) ? _items.push(item) : _items.push({
                text: {
                    value: item
                }
            });
            if (index !== items.length - 1) {
                isExist(separator) && isObject(separator) ? _items.push(Object.assign(separator, {type: 'separator'})) : _items.push({
                    type: 'separator',
                    text: {
                        value: separator
                    }
                })

            }
        });
        return (
            <Fragment>
                <Nav ref="Breadcrumb" {..._props(props)} {...{
                    type: 'inline',
                    items: _items
                }}/>
            </Fragment>
        );
    }
}