import React, {Component, Fragment} from 'react';
import {DefaultProps, PropTypes, _delivery} from '../../_scripts/_proptypes';
import {isExist, isArray, isString} from "../../_scripts/_is";
import {_totalColor} from '../../_scripts/_public';
import Div from '../_div/index.osx';
import Icon from '../_icon/index.osx';
import Button from '../_button/index.osx';
import PropType from 'prop-types';
import './index.scss'
const AlertProps = {
    title: {},
    closeBtn: {
        default: true,
        type: PropType.bool
    },
    alertColor: {
        type: PropType.oneOf(_totalColor)
    },
    types: {
        type: PropType.oneOfType([
            PropType.string,
            PropType.array
        ])
    },
    icon: {
        type: PropType.string
    },
    iconStyle: {
        type: PropType.string
    },
    actions: {
        type: PropType.array
    },
    actionStyle: {
        type: PropType.object
    },
    message: {},
    children: {}
};

export default class Alert extends Component {
    constructor(props) {
        super(props);
    }

    static defaultProps = DefaultProps(AlertProps);
    static propTypes = PropTypes(AlertProps);

    render() {

        const _props = this.props;
        const {title, closeBtn, alertColor, types, icon, iconStyle, actions, actionStyle, message} = _props;
        let _sysClass = ['alert', 'm-alert'];
        isExist(alertColor) && isString(alertColor) && _sysClass.push('alert-' + alertColor);
        closeBtn && (_sysClass = _sysClass.concat([' alert-dismissible ', 'fade', 'show']));
        isExist(types) && isArray(types) && types.map((item) => {
            _sysClass.push('m-alert--' + item);
        });
        isExist(types) && isString(types) && _sysClass.push('m-alert--' + types);
        isExist(icon) && isString(icon) && _sysClass.push('m-alert--icon');
        isExist(iconStyle) && iconStyle === 'solid' && isExist(icon) && _sysClass.push('m-alert--icon-solid');
        const closeBtnAttr = {
            "data-dismiss": "alert",
            "aria-label": "Close",
            "aria-hidden": "true"
        };

        return (
            <Fragment>
                <Div ref='alert' {..._delivery(_props, _sysClass)}>
                    {icon && (
                        <Div _includeClass="m-alert__icon">
                            <Icon iconName={icon}/>
                        </Div>
                    )}
                    <Div _includeClass="m-alert__text">
                        {closeBtn && !icon &&
                        <Button type="button" _includeAttribute={closeBtnAttr} _uniqueClass="close"/>}
                        {title && (<strong>{title}</strong>)}
                        {message}
                    </Div>
                    {
                        closeBtn && icon && isArray(actions) && actions.length === 0 &&
                        <Div _includeClass="m-alert__close">
                            <Button type="button" _includeAttribute={closeBtnAttr} _uniqueClass="close"/>
                        </Div>
                    }
                    {
                        !closeBtn && isArray(actions) && actions.length !== 0 && (
                            <Div _includeClass="m-alert__actions" _includeStyle={actionStyle}>
                                {
                                    isArray(actions) && actions.map((item, index) => {
                                        if (item.closeBtn) {
                                            return <Button key={index} {...item} _includeAttribute={closeBtnAttr}/>
                                        } else {
                                            return <Button key={index} {...item}/>
                                        }
                                    })
                                }
                            </Div>
                        )
                    }
                </Div>
            </Fragment>
        );
    }
}