import React, {Component, Fragment} from 'react';
import {DefaultProps, PropTypes, _delivery} from '../../_scripts/_proptypes';
import {isExist, isArray, isObject} from "../../_scripts/_is";
import Div from '../_div/index.osx';
import Text from '../_text/index.osx';
import Button from '../_button/index.osx';
import Title from '../_title/index.osx';
import Scroll from '../_scroll/index.osx';

import PropType from 'prop-types';
import './index.scss'
const ModalProps = {
    id: {
        type: PropType.string
    },
    closeBtn: {
        type: PropType.bool
    },
    actions: {
        type: PropType.oneOfType([
            PropType.object,
            PropType.array
        ])
    },
    scroll: {
        type: PropType.object
    },
    centered: {
        type: PropType.bool
    },
    size: {
        default: 'normal',
        type: PropType.oneOf(['lg', 'sm', 'normal'])
    },
    title: {},
    children: {}
};

export default class Modal extends Component {
    constructor(props) {
        super(props);
    }

    static defaultProps = DefaultProps(ModalProps);
    static propTypes = PropTypes(ModalProps);

    render() {
        const _props = this.props;
        const {id, title, closeBtn, actions, scroll, centered, size, children} = _props;
        let _sysClass = ['modal', 'fade'];
        let _dialogClass = ['modal-dialog'];
        isExist(centered) && centered && _dialogClass.push('modal-dialog-centered');
        isExist(size) && ['lg', 'sm'].includes(size) && _dialogClass.push('modal-' + size);
        return (
            <Fragment>
                <Div ref="modal" {..._delivery(_props, _sysClass, null, {id})}>
                    <Div _includeClass={_dialogClass}>
                        <Div _includeClass='modal-content'>
                            <Div _includeClass='modal-header'>
                                {title && <Title level={5} _includeClass='modal-title'>{title}</Title>}
                                {closeBtn && <Button {...{
                                    '_uniqueClass': 'close',
                                    'data-dismiss': 'modal',
                                    'aria-label': 'Close',
                                    'value': (
                                        <Text _includeAttribute={{"aria-hidden": true}}>&times;</Text>)
                                }}/>}
                            </Div>
                            <Div _includeClass='modal-body'>
                                {isExist(scroll) && scroll.show ? <Scroll {...scroll}>
                                    {children}
                                </Scroll> : children}
                            </Div>
                            <Div _includeClass='modal-footer'>
                                {isExist(actions) && isArray(actions) && actions.map((item, index) => (
                                    <Button key={index} {..._delivery(item)}/>
                                ))}
                                {isExist(actions) && isObject(actions) && (
                                    <Button {..._delivery(actions)}/>)}
                            </Div>
                        </Div>
                    </Div>
                </Div>
            </Fragment>
        );
    }
}