import React, {Component, Fragment} from 'react';
import {DefaultProps, PropTypes, _sysBind, _delivery} from '../../_scripts/_proptypes';
import {isExist, isObject, isArray} from "../../_scripts/_is";
import {uuid} from "../../_scripts/_utils";
import PropType from 'prop-types';
import Div from '../_div/index.osx';
import Text from '../_text/index.osx';
import Paragraph from '../_paragraph/index.osx';
import Icon from '../_icon/index.osx';
import Button from '../_button/index.osx';
import ButtonDropdown from '../_buttonDropdown/index.osx';
import './index.scss';

const InputProps = {
        label: {
            type: PropType.oneOfType([
                PropType.object,
                PropType.string
            ])
        },
        text: {
            type: PropType.oneOfType([
                PropType.object,
                PropType.string
            ])
        },
        display: {
            type: PropType.array
        },
        type: {
            type: PropType.oneOf(['input', 'static', 'checkbox', 'radio', 'select', 'textarea', 'custom', 'file'])
        },
        textarea: {
            type: PropType.object
        },
        file: {
            type: PropType.object
        },
        checkbox: {
            type: PropType.object
        },
        radio: {
            type: PropType.object
        },
        select: {
            type: PropType.object
        },
        input: {
            type: PropType.object
        },
        helper: {
            type: PropType.oneOfType([
                PropType.string,
                PropType.object
            ])
        },
        style: {
            type: PropType.oneOfType([
                PropType.oneOf(['pill', 'air', 'square', 'normal']),
                PropType.array
            ])
        },
        solid: {
            type: PropType.bool
        },
        size: {
            type: PropType.oneOf(['normal', 'sm', 'lg'])
        },
        _single: {
            default: false,
            type: PropType.bool
        },
        prepend: {},
        append: {},
        custom: {},
        children: {}
    }
;

export default class Input extends Component {
    constructor(props) {
        super(props);
    }

    static defaultProps = DefaultProps(InputProps);
    static propTypes = PropTypes(InputProps);

    render() {
        const _props = this.props;
        const {label, display, text, type = 'input', textarea, file, checkbox, radio, select, input, helper, custom, style, solid, size, prepend, append, _single} = _props;
        let _sysClass = ['form-group', 'm-form__group'];
        isExist(display) && isArray(display) && _sysClass.push('row');
        let prefix = (isExist(prepend) || isExist(append)) ? 'input-group' : (['checkbox', 'radio'].includes(type)) ? type : 'input';
        let _style = computStyle(style, null, prefix);
        let _solid = computSolid(solid, null, prefix);
        let __size = computSize(size, null, prefix);
        let _size = isExist(size) && ['sm', 'lg'].includes(size) ? ((isExist(prepend) || isExist(append)) ? 'input-group-' + size : 'form-control-' + size) : null;
        let _render = null;
        let id = 'form_element_' + uuid(6);
        let _common = {_style, _solid, _size: __size, id};
        switch (type) {
            case 'static':
                _render = (<StaticText {...{text}}/>);
                break;
            case 'checkbox':
            case 'radio':
                _render = (
                    <CheckBoxRadio {...{
                        _config: (type === 'checkbox' ? checkbox : radio), _element: type, _single, ..._common
                    }}/>
                );
                break;
            case 'select':
                _render = (<Select {...{
                    select,
                    ..._common
                }}/>);
                break;
            case 'textarea':
                _render = (
                    <Textarea {...{
                        textarea,
                        ..._common
                    }}/>);
                break;
            case 'custom':
                _render = custom;
                break;
            case 'file':
                _render = (
                    <File {...{
                        id, file
                    }}/>
                );
                break;
            default:
                _render = (
                    <CommonInput {...{
                        input,
                        ..._common
                    }}/>
                )
        }
        let _insertPend = (
            <Fragment>
                <InsertPand {...{
                    _element: 'prepend',
                    items: prepend
                }}/>
                {
                    _render
                }
                <InsertPand {...{
                    _element: 'append',
                    items: append
                }}/>
                {
                    isExist(helper) ? (isObject(helper) ? (
                        <Text {..._delivery(helper, ['m-form__help'])}>{helper.value}</Text>) : (
                        <Text _includeClass='m-form__help'>{helper}</Text>)) : null
                }
            </Fragment>
        );

        let _incudePand = (
            <Fragment>
                {isExist(prepend || append) ? (
                    <Div
                        _includeClass={['input-group', 'm-input-group', _style.join(' '), ((isExist(prepend) || isExist(append)) && isExist(solid) && solid ? 'm-input-group--solid' : ''), _size]}>
                        {
                            _insertPend
                        }
                    </Div>
                ) : _insertPend}
            </Fragment>
        );

        return (
            <Fragment>
                {
                    isExist(_single) && _single ? _incudePand : (
                        <Div {..._delivery(_props, _sysClass)}>
                            {
                                isExist(label) ? (isObject(label) ? (
                                    <label {..._sysBind(label, [(isArray(display) && isExist(display[0]) ? 'col-form-label col-' + display[0] : '')])}
                                           htmlFor={id}>{label.value}</label>
                                ) : (
                                    <label htmlFor={id}
                                           className={(isArray(display) && isExist(display[0]) ? 'col-form-label col-' + display[0] : '')}>{label}</label>
                                )) : null
                            }
                            {
                                isExist(_single) && _single && _incudePand
                            }
                            {
                                isArray(display) ? (isExist(display[1]) ? (
                                    <Fragment>
                                        <Div _includeClass={['col-' + display[1]]}>
                                            {_incudePand}
                                        </Div>
                                    </Fragment>
                                ) : (
                                    <Fragment>
                                        <Div _includeClass={['col-' + (12 - display[0])]}>
                                            {_incudePand}
                                        </Div>
                                    </Fragment>
                                )) : (
                                    <Fragment>
                                        {_incudePand}
                                    </Fragment>
                                )
                            }
                        </Div>
                    )
                }
            </Fragment>
        );
    }
}

class InsertPand extends Component {
    render() {
        const _props = this.props;
        const {_element = 'prepend', items = []} = _props;
        return (
            <Fragment>
                <Div _includeClass={'input-group-' + _element}>
                    {
                        (isArray(items) ? items.map((item, index) => {
                            let {type = 'text', text, checkbox = {}, radio = {}, button = {}, dropdown = {}} = item;
                            return isObject(item) ? (
                                <Fragment key={index}>

                                    {
                                        type === 'text' &&
                                        <Text _includeClass='input-group-text'>{text}</Text>
                                    }
                                    {
                                        type === 'icon' &&
                                        <Text _includeClass='input-group-text'><Icon iconName={text}/></Text>
                                    }
                                    {
                                        type === 'checkbox' &&
                                        <Text _includeClass='input-group-text'>
                                            <Input {...{
                                                type: 'checkbox',
                                                checkbox,
                                                _single: true
                                            }}/>
                                        </Text>
                                    }
                                    {
                                        type === 'radio' &&
                                        <Text _includeClass='input-group-text'>
                                            <Input {...{
                                                type: 'radio',
                                                radio,
                                                _single: true
                                            }}/>
                                        </Text>
                                    }
                                    {
                                        type === 'button' &&
                                        <Button {...button}/>
                                    }
                                    {
                                        type === 'dropdown' &&
                                        <ButtonDropdown {...dropdown}/>
                                    }

                                </Fragment>
                            ) : (
                                <Text key={index} _includeClass='input-group-text'>{item}</Text>
                            )
                        }) : (<Fragment>
                            <Text _includeClass='input-group-text'>{items}</Text>
                        </Fragment>))
                    }
                </Div>
            </Fragment>
        );
    }
}


class CommonInput extends Component {
    render() {
        const _props = this.props;
        const {input = {}, _style = [], _solid = false, _size = 'normal', id} = _props;
        const {autoComplete = true, type = 'text', placeholder = '', style, solid, size, disabled = false, readOnly = false, value} = input;
        let _sysClass = ['form-control', 'm-input'];
        _sysClass = _sysClass.concat(computStyle(style, _style));
        isExist(computSolid(solid, _solid)) && _sysClass.push(computSolid(solid, _solid));
        isExist(computSize(size, _size)) && _sysClass.push(computSize(size, _size));
        return (
            <Fragment>
                <input
                    autoComplete={(!!autoComplete).toString()} {..._sysBind(input, _sysClass, null, {
                    type,
                    placeholder,
                    id,
                    disabled,
                    readOnly,
                    defaultValue: value
                })}/>
            </Fragment>
        );
    }
}


class Select extends Component {
    render() {
        const _props = this.props;
        const {select = {}, _style = [], _solid = false, _size = 'normal', id} = _props;
        const {style, solid, size, multiple, items = [], disabled = false, readOnly = false} = select;
        let _sysClass = ['form-control', 'm-input'];
        _sysClass = _sysClass.concat(computStyle(style, _style));
        isExist(computSolid(solid, _solid)) && _sysClass.push(computSolid(solid, _solid));
        isExist(computSize(size, _size)) && _sysClass.push(computSize(size, _size));
        return (
            <Fragment>
                <select {..._sysBind(select, _sysClass, null, {multiple, id})} disabled={disabled} readOnly={readOnly}>
                    {
                        isArray(items) ? items.map((item, index) => (
                            <SelectOption key={index} {...{item}}/>)) : <SelectOption key={index} {...{items}}/>
                    }
                </select>
            </Fragment>
        );
    }
}

class SelectOption extends Component {
    render() {
        const _props = this.props;
        const {item = ''} = _props;
        let {type, value, name} = item;
        let _option = null;
        if (isObject(item)) {
            switch (type) {
                case 'group':
                    _option = (
                        <Fragment>
                            <optgroup {..._sysBind(item)} label={name || value || ''}/>
                        </Fragment>
                    );
                    break;
                default:
                    _option = (
                        <Fragment>
                            <option {..._sysBind(item)}
                                    value={value || name || ''}>{name || value || ''}</option>
                        </Fragment>
                    );
            }
        } else {
            _option = (<option value={item}>{item}</option>)
        }
        return _option;
    }

}


class StaticText extends Component {
    static propTypes = {
        text: PropType.oneOfType([
            PropType.string,
            PropType.object
        ])
    };

    render() {
        const _props = this.props;
        const {text = ''} = _props;
        const _render = isObject(text) ? (
            <Paragraph {..._delivery(text, ['form-control-static'])}>{text.value}</Paragraph>) : (
            <Paragraph _includeClass='form-control-static'>{text}</Paragraph>);
        return (
            <Fragment>
                {_render}
            </Fragment>
        );
    }
}

class File extends Component {
    render() {
        const _props = this.props;
        const {file, id} = _props;
        const {placeholder = '', disabled, readOnly} = file;
        return (
            <Fragment>
                <Div _includeClass="custom-file">
                    <input type='file' {..._sysBind(file, 'custom-file-input')} id={id} disabled={disabled}
                           readOnly={readOnly}/>
                    <Text {...{
                        _includeClass: 'custom-file-label',
                        _includeAttribute: {
                            htmlFor: id
                        }
                    }}>
                        {file.placeholder}
                    </Text>
                </Div>
            </Fragment>
        );
    }
}

class CheckBoxRadio extends Component {
    render() {
        const _props = this.props;
        const {_single = false, _config = {}, _element = 'checkbox', _style, _solid, _name = (type + '_' + uuid(4))} = _props;
        const {items, type = 'list'} = _config;
        let _render = null;
        if (_single) {
            _render = (
                <CheckRaioOption {...{
                    _element,
                    item: items,
                    _style,
                    _config,
                    _name,
                    _single: true
                }}/>
            );
        } else {
            let _sysClass = [];
            type === 'list' ? _sysClass.push('m-' + _element + '-list') : _sysClass.push('m-' + _element + '-inline');
            _render = (
                <Div
                    _includeClass={_sysClass.join(' ')}>
                    {
                        isArray(items) ? items.map((item, index) => {
                            return (
                                <Fragment key={index}>
                                    <CheckRaioOption {...{
                                        _element,
                                        _solid,
                                        _style,
                                        item,
                                        _config,
                                        _name
                                    }}/>
                                </Fragment>
                            )
                        }) : (
                            <Fragment>
                                <CheckRaioOption {...{
                                    _element,
                                    _solid,
                                    item: items,
                                    _style,
                                    _config,
                                    _name
                                }}/>
                            </Fragment>
                        )
                    }
                </Div>
            );
        }
        return _render;
    }
}

class CheckRaioOption extends Component {
    render() {
        const _props = this.props;
        const {_element, item, _config, _solid, _style, _name, _single = false} = _props;
        const {value = '', name = '', stateColor, checkedColor, checked = false, disabled = false, solid, style, bold, checkedBold} = item;
        let _sysClass = ['m-' + _element];
        _sysClass = _sysClass.concat(computStyle(style, _style, _element));
        isExist(stateColor) && _sysClass.push('m-' + _element + '--state-' + stateColor);
        isExist(checkedColor) && _sysClass.push('m-' + _element + '--' + checkedColor);
        isExist(disabled) && disabled && _sysClass.push('m-' + _element + '--disabled');
        isExist(bold) && bold && _sysClass.push('m-' + _element + '--bold');
        isExist(checkedBold) && checkedBold && _sysClass.push('m-' + _element + '--check-bold');
        isExist(_single) && _single && _sysClass.push('m-' + _element + '--single');
        isExist(computSolid(solid, _solid, _element)) && _sysClass.push(computSolid(solid, _solid, _element));
        return (
            <label className={_sysClass.join(' ')}>
                <input name={_name || name} type={_element}
                       value={value || name || _name}
                       disabled={disabled}
                       defaultChecked={checked}/>
                {name || value || null}
                <span></span>
            </label>
        )
    }
}

class Textarea extends Component {
    render() {
        const _props = this.props;
        const {textarea = '', _style = [], _solid = false, _size = 'normal', id} = _props;//全局配置
        const {style, solid, size, value, disabled, readOnly} = textarea; //覆盖配置
        let _sysClass = ['form-control', 'm-input'];
        _sysClass = _sysClass.concat(computStyle(style, _style));
        isExist(computSolid(solid, _solid)) && _sysClass.push(computSolid(solid, _solid));
        isExist(computSize(size, _size)) && _sysClass.push(computSize(size, _size));
        return (
            <Fragment>
                {
                    isObject(textarea) ? (
                        <textarea {..._sysBind(textarea, _sysClass, null, {id})} disabled={disabled}
                                  readOnly={readOnly}>
                                    {value}
                                </textarea>
                    ) : (
                        <textarea className={['form-control', 'm-input']}>
                                    {textarea}
                                </textarea>
                    )
                }
            </Fragment>
        );
    }
}


const computStyle = (_ownerStyle, _globalStyle, prefix = 'input') => {
    if (isExist(_ownerStyle)) {
        if (isArray(_ownerStyle)) {
            let _style = [];
            _ownerStyle.map((item) => {
                _style.push('m-' + prefix + '--' + item);
            });
            return _style;
        } else return ['m-' + prefix + '--' + _ownerStyle];
    } else {
        if (isExist(_globalStyle)) {
            return isArray(_globalStyle) ? _globalStyle : [_globalStyle]
        } else return [];
    }
};


const computSolid = (_ownerSolid = false, _globalSolid = false, prefix = 'input') => {
    return _ownerSolid ? 'm-' + prefix + '--solid' : _globalSolid;
};

const computSize = (_ownerSize, _globalSize, prefix = 'input') => {
    return _ownerSize && ['sm', 'lg'].includes(_ownerSize) ? 'form-control-' + _ownerSize : _globalSize;
};