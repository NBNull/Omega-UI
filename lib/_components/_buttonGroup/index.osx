import React, {Component, Fragment} from 'react';
import {DefaultProps, PropTypes, _delivery} from '../../_scripts/_proptypes';
import {isExist, isString, isArray} from "../../_scripts/_is";
import {_totalColor} from '../../_scripts/_public';
import Div from '../_div/index.osx';
import ButtonDropdown from '../_buttonDropdown/index.osx';
import Button from '../_button/index.osx';

import PropType from 'prop-types';

// import './index.scss'
const ButtonGroupProps = {
    size: {
        type: PropType.oneOf(['normal', 'lg', 'sm'])
    },
    btns: {
        type: PropType.array
    },
    groupStyle: {
        type: PropType.oneOfType([
            PropType.string,
            PropType.array
        ])
    },
    vertical: {
        type: PropType.bool
    },
    children: {}
};

export default class ButtonGroup extends Component {
    constructor(props) {
        super(props);
    }

    static defaultProps = DefaultProps(ButtonGroupProps);
    static propTypes = PropTypes(ButtonGroupProps);

    render() {
        const _props = this.props;
        const {size, btns, groupStyle, vertical} = _props;
        let _sysClass = [];
        isExist(vertical) && vertical ? _sysClass.push('btn-group-vertical') : _sysClass.push('btn-group')
        isExist(size) && ['sm', 'lg'].includes(size) && _sysClass.push('btn-group-' + size);
        isExist(groupStyle) && isArray(groupStyle) && groupStyle.map((item) => {
            isString(item) && _sysClass.push('m-btn-group--' + item);
        });
        isExist(groupStyle) && isString(groupStyle) && _sysClass.push('m-btn-group--' + groupStyle);

        return (
            <Fragment>
                <Div {..._delivery(_props, _sysClass, null, {
                    role: 'group'
                })}>
                    {
                        isExist(btns) && isArray(btns) && btns.map((item, index) => {
                            switch (item.type) {
                                case 'dropdown':
                                    if (index + 1 === btns.length && _sysClass.includes('m-btn-group--pill')) Object.assign(item.dropdown.button, {_includeClass: 'm-btn--pill-last'})
                                    if (index === 0 && _sysClass.includes('m-btn-group--pill')) Object.assign(item.dropdown.button, {_includeClass: 'm-btn--pill-first'});
                                    return (<ButtonDropdown key={index} {..._delivery(item.dropdown)}/>);
                                    break;
                                default:
                                    return (<Button key={index} {..._delivery(item)}
                                                    _excludeClass={isExist(item.icon) && item.icon.show ? ['m-btn--icon', 'm-btn--icon-only'] : []}/>);
                            }
                        })
                    }
                </Div>
            </Fragment>
        );
    }
}